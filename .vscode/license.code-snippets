{
	"mit": {
		"prefix": "mit",
		"body": [
			"// Copyright © 2022 <CorvusYe@163.com>",
			"// Permission is hereby granted, free of charge, to any person obtaining a copy of this ",
			"// software and associated documentation files (the “Software”), to deal in the Software ",
			"// without restriction, including without limitation the rights to use, copy, modify,",
			"// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to ",
			"// permit persons to whom the Software is furnished to do so, subject to the following ",
			"// conditions:",
			"// ",
			"// The above copyright notice and this permission notice shall be included in all copies or ",
			"// substantial portions of the Software.",
			"// ",
			"// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, ",
			"// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR ",
			"// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE ",
			"// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT ",
			"// OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR ",
			"// OTHER DEALINGS IN THE SOFTWARE.",
			""
		],
		"description": "copyright snippets"
 },
 "desc": {
	 "prefix": "desc",
	 "body": [
		"/// ",
		"/// @description: $1",  // 按一下 tab 自动跳转到这里
		"/// ",
		"/// @author: CorvusYe",
		"/// ",
		"/// @date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
		"/// ",
	 ],
	 "description": "class desc"
	},
	"demo": {
		"prefix": "demo",
		"body": [
			// "import 'package:flutter/material.dart';",
			// "import 'package:wao_ui/wao_ui.dart';",
			// "import '../demos.dart';",
			"",
			"var $1 = Demo(",
			"'$1',",
			"$2,",
			"\tr'''",
			"$2",
			"\t''',",
			"\t'',",
			");",
		],
		"description": "create demo"
	},
	"btnSize": {
		"prefix": "btnSize",
		"body": [
			"[",
				"[_button, '$$_button$$1Suf']",
			"]: BaseStyle(",
				"padding: CfgGlobal.padding.$1,",
				"fontSize: CfgGlobal.fontSize.$2,",
				"borderRadius: CfgGlobal.circularBorderRadius.$1,",
			"),",
			"[",
				"[_button, '$$_button$$1Suf', isRound]",
			"]: BaseStyle(",
				"padding: CfgGlobal.roundPadding.$1,",
			"),",
			"[",
				"[_button, '$$_button$$1Suf', isCircle]",
			"]: BaseStyle(",
				"padding: CfgGlobal.circlePadding.$1,",
			"),",
		],
		"description": "btn size"
	},
	"btnTypeColor": {
		"prefix": "btnTypeColor",
		"body": [
			"/// 颜色设置，不同类型结构相同，当前是 $1",
			"[",
				"[_button, '$$_button$$1Suf']",
			"]: BaseStyle(",
				"color: CfgGlobal.basicColor.shade50,",
				"backgroundColor: CfgGlobal.$1Color,",
				"borderColor: CfgGlobal.$1Color,",
			"),",
			"[",
				"[_button, '$$_button$$1Suf', focus],",
				"[_button, '$$_button$$1Suf', hover],",
			"]: BaseStyle(",
			  "backgroundColor: CfgGlobal.$1Color.shade700,",
			  "borderColor: CfgGlobal.$1Color.shade700,",
			  "color: CfgGlobal.basicColor.shade50,",
			"),",
			"[",
			"[_button, '$$_button$$1Suf', isActive],",
			"[_button, '$$_button$$1Suf', active],",
			"]: BaseStyle(",
			  "backgroundColor: CfgGlobal.$1Color.shade900,",
			  "borderColor: CfgGlobal.$1Color.shade900,",
			  "color: CfgGlobal.basicColor.shade50,",
			"),",
			"[",
			  "[_button, '$$_button$$1Suf', isDisabled],",
			  "[_button, '$$_button$$1Suf', isDisabled, active],",
			  "[_button, '$$_button$$1Suf', isDisabled, focus],",
			  "[_button, '$$_button$$1Suf', isDisabled, hover],",
			"]: BaseStyle(",
			  "color: CfgGlobal.basicColor.shade50,",
			  "backgroundColor: CfgGlobal.$1Color.shade400,",
			  "borderColor: CfgGlobal.$1Color.shade400,",
			"),",
			"[",
			  "[_button, '$$_button$$1Suf', isPlain]",
			"]: BaseStyle(",
			  "color: CfgGlobal.$1Color,",
			  "backgroundColor: CfgGlobal.$1Color.shade50,",
			  "borderColor: CfgGlobal.$1Color.shade300,",
			"),",
			"[",
			  "[_button, '$$_button$$1Suf', isPlain, focus],",
			  "[_button, '$$_button$$1Suf', isPlain, hover],",
			"]: BaseStyle(",
			  "backgroundColor: CfgGlobal.$1Color,",
			  "borderColor: CfgGlobal.$1Color,",
			  "color: CfgGlobal.basicColor.shade50,",
			"),",
			"[",
			  "[_button, '$$_button$$1Suf', isPlain, active],",
			"]: BaseStyle(",
			  "backgroundColor: CfgGlobal.$1Color.shade900,",
			  "borderColor: CfgGlobal.$1Color.shade900,",
			  "color: CfgGlobal.basicColor.shade50,",
			"),",
			"[",
			  "[_button, '$$_button$$1Suf', isPlain, isDisabled],",
			  "[_button, '$$_button$$1Suf', isPlain, isDisabled, active],",
			  "[_button, '$$_button$$1Suf', isPlain, isDisabled, focus],",
			  "[_button, '$$_button$$1Suf', isPlain, isDisabled, hover],",
			"]: BaseStyle(",
			  "color: CfgGlobal.$1Color.shade500,",
			  "backgroundColor: CfgGlobal.$1Color.shade50,",
			  "borderColor: CfgGlobal.$1Color.shade100,",
			"),",
		],
		"description": "create demo"
	},
	"newCpn": {
		"prefix": "newCpn",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:wao_ui/core/base_on.dart';",
			"import 'package:wao_ui/core/base_prop.dart';",
			"import 'package:wao_ui/core/base_slot.dart';",
			"import 'package:wao_ui/core/base_widget.dart';",
			"import '../../core/base_style.dart';",

			"class $1 extends StatelessWidget",
			"\twith BaseMixins<$1On, $1Prop, $1Slot, $1Style> {",
				"$1({Key? key, $1On? on, $1Prop? props, $1Slot? slots,$1Style? style,})",
						": super(key: key) {",
					"$$on = on ?? $1On();",
					"$$props = props ?? $1Prop();",
					"$$slots = slots ?? $1Slot(null);",
					"$$style = style ?? $1Style();",
				"}",

				"@override",
				"Widget build(BuildContext context) {",
					"return Container();",
				"}",
			"}",

			"class $1On extends BaseOn {}",

			"class $1Prop extends BaseProp {}",

			"class $1Slot extends BaseSlot {",
				"$1Slot(defaultSlotBefore) : super(defaultSlotBefore);",
			"}",
			
			"class $1Style extends BaseStyle {}"
		],
	},
		"borderSide": {
			"prefix": "borderSide",
			"body": [
				"// $1",
				"Color? $1Color;",
				"double? $1Width;",
				"BorderStyle? $1Style;",
				"set $1(BorderSide? borderSide) {",
					"if (borderSide == null) return;",
						"$1Color = pickStyle($1Color, borderSide.color);",
						"$1Width = pickStyle($1Width, borderSide.width);",
						"$1Style = pickStyle($1Style, borderSide.style);",
				"}",
				"BorderSide? get $1 {",
					"if ($1Width == null &&",
							"$1Color == null &&",
							"$1Style == null) return null;",
							"return BorderSide(color: $1Color ?? Colors.transparent)",
							".copyWith(width: $1Width)",
							".copyWith(style: $1Style);",
				"}",
			]
		},
		"newColor": {
			"prefix": "newColor",
			"body": [
			"..putIfAbsent(",
        "[$1],",
        "() => BaseStyle()$2",
      ")$3",
			],
		}		
}